/*
 2016-3-18 21:55
 Nuaa Ccst eastern  Lab104
 problem : http://www.spoj.com/problems/MULTQ3/
 descrpition:
   There are N numbers a[0],a[1]..a[N - 1]. Initally all are 0. You have to perform two types of operations :

1) Increase the numbers between indices A and B (inclusive) by 1. This is represented by the command "0 A B"
2) Answer how many numbers between indices A and B (inclusive) are divisible by 3. This is represented by the command "1 A B".


new thoughts :
 	I think segmentTree has a memory ability, which let it like Dynamic's Table. 
 	The lazy idea is widely used. 
 	In segmentTree, when it change an interval , not a node, it will cost O(n) time to update every node in this interval
 	the Lazy idea suggests that we can left a tag in this interval,change the interval, and at this time we see the interval as a node , and 
 	when we want to query its child interval , we can down the tag first. 
*/

#include <cstdio>

struct node {
	int s0,s1,s2,lazy ;
};

node T[900030] ;

node sum(node l, node r) {
	node c;
	c.s0 = l.s0 + r.s0;
	c.s1 = l.s1 + r.s1;
	c.s2 = l.s2 + r.s2; 
	c.lazy = 0 ;
	return c; 
}

void build(int l,int r,int p){
	if (l==r) {
		T[p].s0= 1;
		T[p].s1 = T[p].s2 = T[p].lazy = 0 ;
		return ;
	}
	int mid= (l+r) >> 1;
	build(l,mid,p<<1) ;
	build(mid+1,r,p<<1|1);
	T[p] = sum(T[p<<1], T[p<<1|1]) ; 
}

void calc(int x,int add) {
	int temp ;
	if (add % 3 ==1) {
 		temp = T[x].s0 ;
 		T[x].s0 = T[x].s2 ;
 		T[x].s2 = T[x].s1 ;
 		T[x].s1 = temp ; 
	} 
	if (add % 3 ==2) {
 		temp = T[x].s0 ;
 		T[x].s0 = T[x].s1 ;
 		T[x].s1 = T[x].s2 ;
 		T[x].s2 = temp ;
	}
}

void down(int x) {
	T[x<<1].lazy +=  T[x].lazy;
	T[x<<1|1].lazy += T[x].lazy;
	calc(x<<1,T[x].lazy);
	calc(x<<1|1,T[x].lazy);
	T[x].lazy = 0 ; 
}

void update(int l,int r,int x, int y, int p){
	if (x<=l && r<=y) {
		T[p].lazy += 1 ;
		calc(p,1); 
		return ;
	}
	if (T[p].lazy>0) down(p);
	int mid = (l+r) >>1 ;
	if (y<=mid ) update(l,mid,x,y,p<<1) ;
	else if (x>mid) update(mid+1,r,x,y,p<<1|1);
	else {
		update(l,mid,x,mid,p<<1);
		update(mid+1,r,mid+1,y,p<<1|1);
	}

	T[p] = sum(T[p<<1], T[p<<1|1]);  
}

node query(int l,int r,int x,int y, int p) {
	if (x<=l && r<=y) return T[p];
	if (T[p].lazy>0) down(p);
	int mid= (l+r) >> 1;
	if (y<=mid) return query(l,mid,x,y,p<<1); 
	if (x>mid) return query(mid+1,r,x,y,p<<1|1); else 
	return sum(query(l,mid,x,mid,p<<1), query(mid+1,r,mid+1,y,p<<1|1)) ; 
}

int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	build(1,n,1) ; 
	for (int i=1; i<=m; ++i) {
		int mode, a,b;
		scanf("%d%d%d",&mode, &a, &b); 
		++a,++b; 
		if (mode) printf("%d\n",query(1,n,a,b,1).s0);
		else update(1,n,a,b,1); 
	}
}
